---
trigger:
  batch: true
  branches:
    include:
      - master
pr:
  - master
schedules:
  - cron: "0 1 * * *"
    displayName: "nightly builds"
    branches:
      include:
        - dev
    always: true
variables:
  - name: yarnCachePath
    value: $(Pipeline.Workspace)/.yarn
  - name: githubRepository
    value: 'timmo001/home-panel'
  - group: docker
  - name: dockerSlug
    value: 'home-panel'
  - name: dockerTarget
    value: '.'
  - name: aarch64Base
    value: 'arm64v8/alpine:3.10.3'
  - name: amd64Base
    value: 'amd64/alpine:3.10.3'
  - name: armhfBase
    value: 'arm32v6/alpine:3.10.3'
  - name: armv7Base
    value: 'arm32v7/alpine:3.10.3'
  - name: i386Base
    value: 'i386/alpine:3.10.3'
  - name: versionHadolint
    value: 'v1.17.2'
resources:
  repositories:
    - repository: organization
      type: github
      name: 'timmo001/organization'
      endpoint: 'timmo001'
    - repository: docker
      type: github
      name: 'timmo001/azure-pipelines-multiarch-docker'
      endpoint: 'timmo001'

stages:
  - stage: 'Lint'
    jobs:
      - template: azure-ci/lint-hadolint.yml@organization
        parameters:
          hadolintVersion: $(versionHadolint)
          path: 'Dockerfile'
  - stage: 'Build'
    dependsOn: 'Lint'
    condition: succeeded()
    jobs:
      - job: 'Build_App'
        displayName: 'App'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Cache@2
            inputs:
              key: 'yarn | "$(Agent.OS)" | yarn.lock'
              path: $(yarnCachePath)
              restoreKeys: |
                yarn | "$(Agent.OS)"
                yarn
            displayName: 'Cache Yarn Packages'
          - task: NodeTool@0
            inputs:
              versionSpec: '13.x'
            displayName: 'Install Node.js'
          - script: |
              yarn install  --pure-lockfile --cache-folder $(yarnCachePath)
              yarn run build --production
            displayName: 'Install and Build'
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'build'
              ArtifactName: 'app'
              publishLocation: 'Container'
            displayName: 'Publish Build'
  - stage: 'Docker'
    dependsOn: 'Build'
    condition: succeeded()
    jobs:
      - job: 'Docker_Build'
        displayName: 'Build'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          maxParallel: 5
          matrix:
            aarch64:
              buildArch: 'aarch64'
              buildBase: $(aarch64Base)
            amd64:
              buildArch: 'amd64'
              buildBase: $(amd64Base)
            armhf:
              buildArch: 'armhf'
              buildBase: $(armhfBase)
            armv7:
              buildArch: 'armv7'
              buildBase: $(armv7Base)
            i386:
              buildArch: 'i386'
              buildBase: $(i386Base)
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'app'
              downloadPath: $(System.DefaultWorkingDirectory)/build
          - template: .azure-pipelines.yml@docker
