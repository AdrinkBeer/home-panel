---
trigger:
  batch: true
  branches:
    include:
      - master
pr:
  - master
schedules:
  - cron: "0 1 * * *"
    displayName: "nightly builds"
    branches:
      include:
        - dev
    always: true
variables:
  - name: yarnCachePath
    value: $(Pipeline.Workspace)/.yarn
  - name: githubRepository
    value: 'timmo001/home-panel'
  - name: dockerSlug
    value: 'home-panel'
  - name: dockerTarget
    value: '.'
  - name: aarch64Base
    value: 'arm64v8/alpine:3.10.3'
  - name: amd64Base
    value: 'amd64/alpine:3.10.3'
  - name: armhfBase
    value: 'arm32v6/alpine:3.10.3'
  - name: armv7Base
    value: 'arm32v7/alpine:3.10.3'
  - name: i386Base
    value: 'i386/alpine:3.10.3'

stages:
  - stage: 'Build'
    jobs:
      - job: 'Build_App'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Cache@2
            inputs:
              key: 'yarn | "$(Agent.OS)" | yarn.lock'
              path: $(yarnCachePath)
              restoreKeys: |
                yarn | "$(Agent.OS)"
                yarn
            displayName: 'Cache Yarn Packages'
          - task: NodeTool@0
            inputs:
              versionSpec: '13.x'
            displayName: 'Install Node.js'
          - script: |
              yarn install  --pure-lockfile --cache-folder $(yarnCachePath)
              yarn run build --production
            displayName: 'Install and Build'
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'build'
              ArtifactName: 'app'
              publishLocation: 'Container'
            displayName: 'Publish Build'
  - stage: 'Docker'
    jobs:
      - job: 'Build_Docker'
        dependsOn: 'Build_App'
        condition: succeeded()
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          maxParallel: 5
          matrix:
            aarch64:
              buildArch: 'aarch64'
              buildMachine: 'qemuarm-64,raspberrypi3-64,raspberrypi4-64,odroid-c2,orangepi-prime'
              buildBase: $(aarch64Base)
            amd64:
              buildArch: 'amd64'
              buildMachine: 'qemux86-64,intel-nuc'
              buildBase: $(amd64Base)
            armhf:
              buildArch: 'armhf'
              buildMachine: 'qemuarm,raspberrypi'
              buildBase: $(armhfBase)
            armv7:
              buildArch: 'armv7'
              buildMachine: 'raspberrypi2,raspberrypi3,raspberrypi4,odroid-xu,tinker'
              buildBase: $(armv7Base)
            i386:
              buildArch: 'i386'
              buildMachine: 'qemux86'
              buildBase: $(i386Base)
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'app'
              downloadPath: $(System.DefaultWorkingDirectory)/build
          - task: Docker@2
            inputs:
              containerRegistry: 'dockerHub'
              repository: $(dockerSlug)
              command: 'build'
              Dockerfile: 'Dockerfile'
              arguments: |
                --build-arg "BUILD_ARCH=$(buildArch)"
                --build-arg "BUILD_DATE=$(date +"%Y-%m-%dT%H:%M:%SZ")"
                --build-arg "BUILD_FROM=$(buildBase)"
            displayName: 'Docker Build'
      - job: 'Push_Docker'
        dependsOn: 'Build_Docker'
        condition: succeeded()
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'dockerHub'
              command: 'login'
            displayName: 'Docker Login'
