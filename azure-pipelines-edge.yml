---
trigger:
  batch: true
  branches:
    include:
      - "master"

pr: "none"

pool:
  vmImage: "ubuntu-latest"

variables:
  - name: "yarnCachePath"
    value: "$(Pipeline.Workspace)/.yarn"
  - group: "github"
  - name: "githubRepository"
    value: "timmo001/home-panel"
  - group: "docker"
  - name: "dockerSlug"
    value: "home-panel"
  - name: "dockerTarget"
    value: "."
  - name: "aarch64Base"
    value: "arm64v8/alpine:3.11.3"
  - name: "amd64Base"
    value: "amd64/alpine:3.11.3"
  - name: "armhfBase"
    value: "arm32v6/alpine:3.11.3"
  - name: "armv7Base"
    value: "arm32v7/alpine:3.11.3"
  - name: "i386Base"
    value: "i386/alpine:3.11.3"
  - name: "aarch64Variant"
    value: "v8"
  - name: "armhfVariant"
    value: "v6"
  - name: "armv7Variant"
    value: "v7"
  - name: "versionNode"
    value: "13.x"

resources:
  repositories:
    - repository: "organization"
      type: "github"
      name: "timmo001/organization"
      endpoint: "timmo001"

stages:
  - stage: "Lint"
    dependsOn: []
    jobs:
      - template: azure-ci/lint/eslint.yml@organization
        parameters:
          path: $(System.DefaultWorkingDirectory)
      - template: azure-ci/lint/hadolint.yml@organization
        parameters:
          path: "Dockerfile"
      - template: azure-ci/lint/jsonlint.yml@organization
        parameters:
          path: $(System.DefaultWorkingDirectory)
      - template: azure-ci/lint/markdownlint.yml@organization
        parameters:
          path: $(System.DefaultWorkingDirectory)
      - template: azure-ci/lint/prettier.yml@organization
        parameters:
          path: $(System.DefaultWorkingDirectory)
      - template: azure-ci/lint/shellcheck.yml@organization
        parameters:
          path: $(System.DefaultWorkingDirectory)
      - template: azure-ci/lint/yamllint.yml@organization
        parameters:
          path: $(System.DefaultWorkingDirectory)
  - stage: "Build"
    dependsOn: []
    jobs:
      - template: azure-ci/build/react-app.yml@organization
  - stage: "Docker"
    dependsOn:
      - "Lint"
      - "Build"
    condition: succeeded()
    jobs:
      - job: "Docker_Build"
        displayName: "Build"
        strategy:
          maxParallel: 5
          matrix:
            aarch64:
              buildArch: "aarch64"
              buildBase: $(aarch64Base)
            amd64:
              buildArch: "amd64"
              buildBase: $(amd64Base)
            armhf:
              buildArch: "armhf"
              buildBase: $(armhfBase)
            armv7:
              buildArch: "armv7"
              buildBase: $(armv7Base)
            i386:
              buildArch: "i386"
              buildBase: $(i386Base)
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download Build Artifacts"
            inputs:
              artifactName: "app"
              downloadPath: $(System.DefaultWorkingDirectory)/build
          - template: azure-ci/docker/qemu-build.yml@organization
            parameters:
              buildArch: "$(buildArch)"
              buildBase: "$(buildBase)"
              githubRepository: "$(githubRepository)"
      - job: "Docker_Login"
        displayName: "Login"
        dependsOn: "Docker_Build"
        condition: succeeded()
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: "dockerHub"
              command: "login"
            displayName: "Login"
      - job: "Docker_Publish"
        displayName: "Publish"
        dependsOn:
          - "Docker_Build"
          - "Docker_Login"
        condition: succeeded()
        strategy:
          maxParallel: 5
          matrix:
            aarch64:
              buildArch: "aarch64"
            amd64:
              buildArch: "amd64"
            armhf:
              buildArch: "armhf"
            armv7:
              buildArch: "armv7"
            i386:
              buildArch: "i386"
        steps:
          - script: |
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceVersion)" \
                "$(dockerLogin)/$(dockerSlug):$(buildArch):$(Build.SourceVersion)"
              docker push "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceVersion)"
              docker push "$(dockerLogin)/$(dockerSlug)-$(buildArch):$(Build.SourceVersion)"
            displayName: "Publish"
      - job: "Docker_Manifest"
        displayName: "Manifest"
        dependsOn:
          - "Docker_Build"
          - "Docker_Login"
          - "Docker_Publish"
        condition: succeeded()
        steps:
          - script: |
              mkdir -p ~/.docker
              echo '("experimental":"enabled")' > ~/.docker/config.json
              docker manifest push "$(dockerLogin)/$(dockerSlug):$(Build.SourceVersion)"
            displayName: "Sha"
          - script: |
              mkdir -p ~/.docker
              echo '("experimental":"enabled")' > ~/.docker/config.json
              docker manifest push "$(dockerLogin)/$(dockerSlug):edge:-$(Build.SourceVersion)"
            displayName: "Edge"
            # TBD in seperate yml
            # beta && version
            # latest && version
