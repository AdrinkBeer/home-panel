{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Panel \u00b6 A touch-compatible web-app for controlling the home. Integrates with Home Assistant as an alternative / additional frontend. Features \u00b6 Supports and can be used as alternate frontend for Home Assistant Supports MJPEG and related image-based camera/image feeds Add weather and weather icons using Home Assistant's Dark Sky component Made for touch screens with a sideways scrolling Material Design interface. (Compatible with deskops also) Screenshots \u00b6","title":"Overview"},{"location":"#home-panel","text":"A touch-compatible web-app for controlling the home. Integrates with Home Assistant as an alternative / additional frontend.","title":"Home Panel"},{"location":"#features","text":"Supports and can be used as alternate frontend for Home Assistant Supports MJPEG and related image-based camera/image feeds Add weather and weather icons using Home Assistant's Dark Sky component Made for touch screens with a sideways scrolling Material Design interface. (Compatible with deskops also)","title":"Features"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"configuration/","text":"Configuration \u00b6 To get started, copy the starter template to the config.json file. Now, we will go over the sections you can configure inside the JSON file along with examples you can adapt: theme \u00b6 auto \u00b6 You can override the way the auto theme triggers between light and dark mode. The format is similar to the way Home Assistant's automations work. You set the sensor's entity_id and the below threshhold. The sensor below is an LDR sensor which sets the dark theme when below 600 LUX : \"theme\" : { \"auto\" : { \"sensor\" : \"sensor.sn1_ldr\" , \"below\" : 600 } } , header \u00b6 \"header\" : { \"left_outdoor_weather\" : { \"dark_sky_icon\" : \"sensor.dark_sky_icon\" , \"condition\" : \"sensor.pws_weather\" , \"data\" : [ { \"entity_id\" : \"sensor.pws_temp_c\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.pws_relative_humidity\" , \"unit_of_measurement\" : \"%\" } ] }, \"right_indoor\" : [ { \"label\" : \"Living Room\" , \"data\" : [ { \"entity_id\" : \"sensor.dht22_01_temperature\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.dht22_01_humidity\" , \"unit_of_measurement\" : \"%\" } ] }, { \"label\" : \"Upstairs\" , \"data\" : [ { \"entity_id\" : \"sensor.sn2_temperature\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.sn2_humidity\" , \"unit_of_measurement\" : \"%\" } ] } ] } , left_outdoor_weather \u00b6 This section is used for setting the entity_id 's of weather sensors. These are meant for outdoor sensors, but can be anything that has a state . dark_sky_icon \u00b6 This is the entity_id of your Dark Sky icon sensor. \"dark_sky_icon\" : \"sensor.dark_sky_icon\" , condition \u00b6 This is the entity_id that describes the current weather conditions. \"condition\" : \"sensor.pws_weather\" , data \u00b6 This is an array of the entity_id 's that describes the current weather conditions. unit_of_measurement is added onto the end of the sensor's state . \"data\" : [ { \"entity_id\" : \"sensor.pws_temp_c\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.pws_relative_humidity\" , \"unit_of_measurement\" : \"%\" } ] right_indoor \u00b6 This is an array of grouped sensors which are labelled by a larger set of text. { \"label\" : \"Living Room\" , \"data\" : [ { \"entity_id\" : \"sensor.dht22_01_temperature\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.dht22_01_humidity\" , \"unit_of_measurement\" : \"%\" } ] } , { \"label\" : \"Upstairs\" , \"data\" : [ { \"entity_id\" : \"sensor.sn2_temperature\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.sn2_humidity\" , \"unit_of_measurement\" : \"%\" } ] } label \u00b6 Text shown above sensor data. \"label\" : \"Living Room\" , data \u00b6 This is an array of the entity_id 's that describes the current weather conditions. unit_of_measurement is added onto the end of the sensor's state . \"data\" : [ { \"entity_id\" : \"sensor.dht22_01_temperature\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.dht22_01_humidity\" , \"unit_of_measurement\" : \"%\" } ] items \u00b6 The main view. Where all the cards, cameras, links etc. go. First give the group of cards a name, then add what you want. See below for the avalible types of cards. \"items\" : [ { \"name\" : \"Scenes\" , \"cards\" : [ { \"entity_id\" : \"scene.reset_lights\" }, { \"entity_id\" : \"scene.reset_kitchen_lights\" }, { \"entity_id\" : \"scene.lights_on\" }, { \"entity_id\" : \"scene.lights_off\" }, { \"entity_id\" : \"scene.all_lights_on\" }, { \"name\" : \"Night/Film Mode\" , \"entity_id\" : \"scene.night_mode\" } ] }, { \"name\" : \"Living Room\" , \"cards\" : [ { \"entity_id\" : \"light.setee_light\" }, { \"entity_id\" : \"light.tv_light\" } ] }, { \"name\" : \"Links/Cameras\" , \"cards\" : [ { \"type\" : \"link\" , \"name\" : \"Shinobi\" , \"url\" : \"http://myserver.local:8080\" }, { \"type\" : \"camera\" , \"name\" : \"Office\" , \"still_url\" : \"http://myserver.local:8080/accesscode/jpeg/groupid/name/s.jpg\" , \"url\" : \"http://myserver.local:8080/accesscode/mjpeg/groupid/name\" } ] } ] hass \u00b6 This is the default type of card. You do not need to set the type here as the app defaults to this. { \"entity_id\" : \"light.tv_light\" } , { \"name\" : \"Night/Film Mode\" , \"entity_id\" : \"scene.night_mode\" } entity_id \u00b6 The entity_id of the HASS entity. Switches and lights act as buttons which can be toggled on and off and scenes, scripts etc. act as non-toggleable buttons. Lights can also be clicked and held / long pressed to set brightness, temperature, effect, color etc. in a more info dialog. \"entity_id\" : \"light.tv_light\" name \u00b6 The name is automatically pulled from HASS , but you can set a custom name if you like. \"name\" : \"Night/Film Mode\" , link \u00b6 A simple hyperlink that opens up another webpage in a new tab/window. To create a link, you must set the type to link . You can then set the url and name as appropriate. This looks and acts the same as a normal card. { \"type\" : \"link\" , \"name\" : \"Shinobi\" , \"url\" : \"http://myserver.local:8080\" } camera \u00b6 You can add any camera image supported by your browser. Set the type to camera to use this. Set the name as appropriate. The camera type spans two cards. Clicking on the camera shows the camera's video feed. { \"type\" : \"camera\" , \"name\" : \"Office\" , \"still_url\" : \"http://myserver.local:8080/accesscode/jpeg/groupid/name/s.jpg\" , \"url\" : \"http://myserver.local:8080/accesscode/mjpeg/groupid/name\" } url \u00b6 The url of the camera feed for use in full screen when the smaller camera card is clicked. \"url\" : \"http://myserver.local:8080/accesscode/mjpeg/groupid/name\" still_url \u00b6 The url of a still image for use in the main view. This updates every minute. \"still_url\" : \"http://myserver.local:8080/accesscode/jpeg/groupid/name/s.jpg\"","title":"Configuration"},{"location":"configuration/#configuration","text":"To get started, copy the starter template to the config.json file. Now, we will go over the sections you can configure inside the JSON file along with examples you can adapt:","title":"Configuration"},{"location":"configuration/#theme","text":"","title":"theme"},{"location":"configuration/#auto","text":"You can override the way the auto theme triggers between light and dark mode. The format is similar to the way Home Assistant's automations work. You set the sensor's entity_id and the below threshhold. The sensor below is an LDR sensor which sets the dark theme when below 600 LUX : \"theme\" : { \"auto\" : { \"sensor\" : \"sensor.sn1_ldr\" , \"below\" : 600 } } ,","title":"auto"},{"location":"configuration/#header","text":"\"header\" : { \"left_outdoor_weather\" : { \"dark_sky_icon\" : \"sensor.dark_sky_icon\" , \"condition\" : \"sensor.pws_weather\" , \"data\" : [ { \"entity_id\" : \"sensor.pws_temp_c\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.pws_relative_humidity\" , \"unit_of_measurement\" : \"%\" } ] }, \"right_indoor\" : [ { \"label\" : \"Living Room\" , \"data\" : [ { \"entity_id\" : \"sensor.dht22_01_temperature\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.dht22_01_humidity\" , \"unit_of_measurement\" : \"%\" } ] }, { \"label\" : \"Upstairs\" , \"data\" : [ { \"entity_id\" : \"sensor.sn2_temperature\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.sn2_humidity\" , \"unit_of_measurement\" : \"%\" } ] } ] } ,","title":"header"},{"location":"configuration/#left_outdoor_weather","text":"This section is used for setting the entity_id 's of weather sensors. These are meant for outdoor sensors, but can be anything that has a state .","title":"left_outdoor_weather"},{"location":"configuration/#dark_sky_icon","text":"This is the entity_id of your Dark Sky icon sensor. \"dark_sky_icon\" : \"sensor.dark_sky_icon\" ,","title":"dark_sky_icon"},{"location":"configuration/#condition","text":"This is the entity_id that describes the current weather conditions. \"condition\" : \"sensor.pws_weather\" ,","title":"condition"},{"location":"configuration/#data","text":"This is an array of the entity_id 's that describes the current weather conditions. unit_of_measurement is added onto the end of the sensor's state . \"data\" : [ { \"entity_id\" : \"sensor.pws_temp_c\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.pws_relative_humidity\" , \"unit_of_measurement\" : \"%\" } ]","title":"data"},{"location":"configuration/#right_indoor","text":"This is an array of grouped sensors which are labelled by a larger set of text. { \"label\" : \"Living Room\" , \"data\" : [ { \"entity_id\" : \"sensor.dht22_01_temperature\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.dht22_01_humidity\" , \"unit_of_measurement\" : \"%\" } ] } , { \"label\" : \"Upstairs\" , \"data\" : [ { \"entity_id\" : \"sensor.sn2_temperature\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.sn2_humidity\" , \"unit_of_measurement\" : \"%\" } ] }","title":"right_indoor"},{"location":"configuration/#label","text":"Text shown above sensor data. \"label\" : \"Living Room\" ,","title":"label"},{"location":"configuration/#data_1","text":"This is an array of the entity_id 's that describes the current weather conditions. unit_of_measurement is added onto the end of the sensor's state . \"data\" : [ { \"entity_id\" : \"sensor.dht22_01_temperature\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.dht22_01_humidity\" , \"unit_of_measurement\" : \"%\" } ]","title":"data"},{"location":"configuration/#items","text":"The main view. Where all the cards, cameras, links etc. go. First give the group of cards a name, then add what you want. See below for the avalible types of cards. \"items\" : [ { \"name\" : \"Scenes\" , \"cards\" : [ { \"entity_id\" : \"scene.reset_lights\" }, { \"entity_id\" : \"scene.reset_kitchen_lights\" }, { \"entity_id\" : \"scene.lights_on\" }, { \"entity_id\" : \"scene.lights_off\" }, { \"entity_id\" : \"scene.all_lights_on\" }, { \"name\" : \"Night/Film Mode\" , \"entity_id\" : \"scene.night_mode\" } ] }, { \"name\" : \"Living Room\" , \"cards\" : [ { \"entity_id\" : \"light.setee_light\" }, { \"entity_id\" : \"light.tv_light\" } ] }, { \"name\" : \"Links/Cameras\" , \"cards\" : [ { \"type\" : \"link\" , \"name\" : \"Shinobi\" , \"url\" : \"http://myserver.local:8080\" }, { \"type\" : \"camera\" , \"name\" : \"Office\" , \"still_url\" : \"http://myserver.local:8080/accesscode/jpeg/groupid/name/s.jpg\" , \"url\" : \"http://myserver.local:8080/accesscode/mjpeg/groupid/name\" } ] } ]","title":"items"},{"location":"configuration/#hass","text":"This is the default type of card. You do not need to set the type here as the app defaults to this. { \"entity_id\" : \"light.tv_light\" } , { \"name\" : \"Night/Film Mode\" , \"entity_id\" : \"scene.night_mode\" }","title":"hass"},{"location":"configuration/#entity_id","text":"The entity_id of the HASS entity. Switches and lights act as buttons which can be toggled on and off and scenes, scripts etc. act as non-toggleable buttons. Lights can also be clicked and held / long pressed to set brightness, temperature, effect, color etc. in a more info dialog. \"entity_id\" : \"light.tv_light\"","title":"entity_id"},{"location":"configuration/#name","text":"The name is automatically pulled from HASS , but you can set a custom name if you like. \"name\" : \"Night/Film Mode\" ,","title":"name"},{"location":"configuration/#link","text":"A simple hyperlink that opens up another webpage in a new tab/window. To create a link, you must set the type to link . You can then set the url and name as appropriate. This looks and acts the same as a normal card. { \"type\" : \"link\" , \"name\" : \"Shinobi\" , \"url\" : \"http://myserver.local:8080\" }","title":"link"},{"location":"configuration/#camera","text":"You can add any camera image supported by your browser. Set the type to camera to use this. Set the name as appropriate. The camera type spans two cards. Clicking on the camera shows the camera's video feed. { \"type\" : \"camera\" , \"name\" : \"Office\" , \"still_url\" : \"http://myserver.local:8080/accesscode/jpeg/groupid/name/s.jpg\" , \"url\" : \"http://myserver.local:8080/accesscode/mjpeg/groupid/name\" }","title":"camera"},{"location":"configuration/#url","text":"The url of the camera feed for use in full screen when the smaller camera card is clicked. \"url\" : \"http://myserver.local:8080/accesscode/mjpeg/groupid/name\"","title":"url"},{"location":"configuration/#still_url","text":"The url of a still image for use in the main view. This updates every minute. \"still_url\" : \"http://myserver.local:8080/accesscode/jpeg/groupid/name/s.jpg\"","title":"still_url"},{"location":"license/","text":"MIT License \u00b6 Copyright \u00a9 Timmo Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#mit-license","text":"Copyright \u00a9 Timmo Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"setup/","text":"Setup \u00b6 Docker Compose \u00b6 Install Docker and Docker Compose Create a directory for your compose file. For example, home-panel Create a config.json using the template below Create a docker-compose.yml file: This example maps the ssl directory in the home directory. Inside this directory are two files fullchain.pem and privkey.pem which are files generated by Let's Encrypt . Change the environment variables to your own Home Assistant details --- version : '3' services : home-panel : image : timmo001/home-panel environment : REACT_APP_HASS_HOST : 'hassioserver.com' REACT_APP_HASS_PASSWORD : 'supersecurepassword' REACT_APP_HASS_SSL : 'true' REACT_APP_API_URL : https://localhost:3234 ports : - 8234:443 volumes : - ~/ssl:/ssl - $(pwd)/config.json:/usr/src/app/config.json home-panel-api : image : timmo001/home-panel-api environment : CERTIFICATES_DIR : /ssl ports : - 3234:3234 volumes : - ~/ssl:/ssl Docker \u00b6 Install Docker Create a config.json using the template below Run image docker run -d \\ -e REACT_APP_HASS_HOST = 'hassioserver.com' \\ -e REACT_APP_HASS_PASSWORD = 'supersecurepassword' \\ -e REACT_APP_HASS_SSL = 'true' \\ -p 8234 :443 \\ -v ~/ssl:/ssl \\ -v $( pwd ) /config.json:/usr/src/app/config.json \\ timmo001/home-panel docker run -d \\ -e CERTIFICATES_DIR = '/ssl' \\ -p 3234 :3234 \\ -v ~/ssl:/ssl \\ timmo001/home-panel-api Node JS \u00b6 API Setup \u00b6 First clone the Home Assistant API repository Checkout the version you want via releases Install packages yarn install Run node index.js Webapp \u00b6 Clone this repository Checkout the version you want via releases Copy .env to .env.local and update it to use your own Home Assistant details Rename config.template.json to config.json cp config.template.json src/config.json Update src/config.json to your configuration Install packages yarn install Copy config.json into node_modules/config.json cp config.json node_modules/ Build a production version yarn build Production - Secure \u00b6 Install nginx Edit your server config /etc/nginx/conf.d/default.conf server { listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; root /usr/share/nginx/html; index index.html; server_name 172.0.0.1; ssl_certificate /ssl/fullchain.pem; ssl_certificate_key /ssl/privkey.pem; location / { try_files $uri /index.html; } } Copy the files in the build folder into nginx's html directory at /usr/share/nginx/html Start your server Development \u00b6 This option is not secure. Do not open to the outside world! Run the app yarn start The app should open in your default browser under http://localhost:3000","title":"Setup"},{"location":"setup/#setup","text":"","title":"Setup"},{"location":"setup/#docker-compose","text":"Install Docker and Docker Compose Create a directory for your compose file. For example, home-panel Create a config.json using the template below Create a docker-compose.yml file: This example maps the ssl directory in the home directory. Inside this directory are two files fullchain.pem and privkey.pem which are files generated by Let's Encrypt . Change the environment variables to your own Home Assistant details --- version : '3' services : home-panel : image : timmo001/home-panel environment : REACT_APP_HASS_HOST : 'hassioserver.com' REACT_APP_HASS_PASSWORD : 'supersecurepassword' REACT_APP_HASS_SSL : 'true' REACT_APP_API_URL : https://localhost:3234 ports : - 8234:443 volumes : - ~/ssl:/ssl - $(pwd)/config.json:/usr/src/app/config.json home-panel-api : image : timmo001/home-panel-api environment : CERTIFICATES_DIR : /ssl ports : - 3234:3234 volumes : - ~/ssl:/ssl","title":"Docker Compose"},{"location":"setup/#docker","text":"Install Docker Create a config.json using the template below Run image docker run -d \\ -e REACT_APP_HASS_HOST = 'hassioserver.com' \\ -e REACT_APP_HASS_PASSWORD = 'supersecurepassword' \\ -e REACT_APP_HASS_SSL = 'true' \\ -p 8234 :443 \\ -v ~/ssl:/ssl \\ -v $( pwd ) /config.json:/usr/src/app/config.json \\ timmo001/home-panel docker run -d \\ -e CERTIFICATES_DIR = '/ssl' \\ -p 3234 :3234 \\ -v ~/ssl:/ssl \\ timmo001/home-panel-api","title":"Docker"},{"location":"setup/#node-js","text":"","title":"Node JS"},{"location":"setup/#api-setup","text":"First clone the Home Assistant API repository Checkout the version you want via releases Install packages yarn install Run node index.js","title":"API Setup"},{"location":"setup/#webapp","text":"Clone this repository Checkout the version you want via releases Copy .env to .env.local and update it to use your own Home Assistant details Rename config.template.json to config.json cp config.template.json src/config.json Update src/config.json to your configuration Install packages yarn install Copy config.json into node_modules/config.json cp config.json node_modules/ Build a production version yarn build","title":"Webapp"},{"location":"setup/#production-secure","text":"Install nginx Edit your server config /etc/nginx/conf.d/default.conf server { listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; root /usr/share/nginx/html; index index.html; server_name 172.0.0.1; ssl_certificate /ssl/fullchain.pem; ssl_certificate_key /ssl/privkey.pem; location / { try_files $uri /index.html; } } Copy the files in the build folder into nginx's html directory at /usr/share/nginx/html Start your server","title":"Production - Secure"},{"location":"setup/#development","text":"This option is not secure. Do not open to the outside world! Run the app yarn start The app should open in your default browser under http://localhost:3000","title":"Development"},{"location":"starter/","text":"Starter Template \u00b6 { \"theme\" : {}, \"header\" : { \"left_outdoor_weather\" : { \"dark_sky_icon\" : \"sensor.dark_sky_icon\" , \"condition\" : \"sensor.pws_weather\" , \"data\" : [ { \"entity_id\" : \"sensor.pws_temp_c\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.pws_relative_humidity\" , \"unit_of_measurement\" : \"%\" } ] }, \"right_indoor\" : [ { \"label\" : \"Living Room\" , \"data\" : [ { \"entity_id\" : \"sensor.dht22_01_temperature\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.dht22_01_humidity\" , \"unit_of_measurement\" : \"%\" } ] } ] }, \"items\" : [ { \"name\" : \"Living Room\" , \"cards\" : [ { \"entity_id\" : \"light.tv_light\" } ] }, { \"name\" : \"Dining Room\" , \"cards\" : [ { \"entity_id\" : \"light.table_light\" } ] } ] }","title":"Starter Template"},{"location":"starter/#starter-template","text":"{ \"theme\" : {}, \"header\" : { \"left_outdoor_weather\" : { \"dark_sky_icon\" : \"sensor.dark_sky_icon\" , \"condition\" : \"sensor.pws_weather\" , \"data\" : [ { \"entity_id\" : \"sensor.pws_temp_c\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.pws_relative_humidity\" , \"unit_of_measurement\" : \"%\" } ] }, \"right_indoor\" : [ { \"label\" : \"Living Room\" , \"data\" : [ { \"entity_id\" : \"sensor.dht22_01_temperature\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.dht22_01_humidity\" , \"unit_of_measurement\" : \"%\" } ] } ] }, \"items\" : [ { \"name\" : \"Living Room\" , \"cards\" : [ { \"entity_id\" : \"light.tv_light\" } ] }, { \"name\" : \"Dining Room\" , \"cards\" : [ { \"entity_id\" : \"light.table_light\" } ] } ] }","title":"Starter Template"},{"location":"template/","text":"Starter Template \u00b6 { \"theme\" : {}, \"header\" : { \"left_outdoor_weather\" : { \"dark_sky_icon\" : \"sensor.dark_sky_icon\" , \"condition\" : \"sensor.pws_weather\" , \"data\" : [ { \"entity_id\" : \"sensor.pws_temp_c\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.pws_relative_humidity\" , \"unit_of_measurement\" : \"%\" } ] }, \"right_indoor\" : [ { \"label\" : \"Living Room\" , \"data\" : [ { \"entity_id\" : \"sensor.dht22_01_temperature\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.dht22_01_humidity\" , \"unit_of_measurement\" : \"%\" } ] } ] }, \"items\" : [ { \"name\" : \"Living Room\" , \"cards\" : [ { \"entity_id\" : \"light.tv_light\" } ] }, { \"name\" : \"Dining Room\" , \"cards\" : [ { \"entity_id\" : \"light.table_light\" } ] } ] }","title":"Template"},{"location":"template/#starter-template","text":"{ \"theme\" : {}, \"header\" : { \"left_outdoor_weather\" : { \"dark_sky_icon\" : \"sensor.dark_sky_icon\" , \"condition\" : \"sensor.pws_weather\" , \"data\" : [ { \"entity_id\" : \"sensor.pws_temp_c\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.pws_relative_humidity\" , \"unit_of_measurement\" : \"%\" } ] }, \"right_indoor\" : [ { \"label\" : \"Living Room\" , \"data\" : [ { \"entity_id\" : \"sensor.dht22_01_temperature\" , \"unit_of_measurement\" : \"\u00b0C\" }, { \"entity_id\" : \"sensor.dht22_01_humidity\" , \"unit_of_measurement\" : \"%\" } ] } ] }, \"items\" : [ { \"name\" : \"Living Room\" , \"cards\" : [ { \"entity_id\" : \"light.tv_light\" } ] }, { \"name\" : \"Dining Room\" , \"cards\" : [ { \"entity_id\" : \"light.table_light\" } ] } ] }","title":"Starter Template"}]}